// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: checkin.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace CheckinProto {

  /// <summary>Holder for reflection information generated from checkin.proto</summary>
  public static partial class CheckinReflection {

    #region Descriptor
    /// <summary>File descriptor for checkin.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CheckinReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1jaGVja2luLnByb3RvEg1jaGVja2luX3Byb3RvGhVhbmRyb2lkX2NoZWNr",
            "aW4ucHJvdG8iLwoQR3NlcnZpY2VzU2V0dGluZxIMCgRuYW1lGAEgAigMEg0K",
            "BXZhbHVlGAIgAigMIssDChVBbmRyb2lkQ2hlY2tpblJlcXVlc3QSDAoEaW1l",
            "aRgBIAEoCRIMCgRtZWlkGAogASgJEhAKCG1hY19hZGRyGAkgAygJEhUKDW1h",
            "Y19hZGRyX3R5cGUYEyADKAkSFQoNc2VyaWFsX251bWJlchgQIAEoCRILCgNl",
            "c24YESABKAkSCgoCaWQYAiABKAMSEgoKbG9nZ2luZ19pZBgHIAEoAxIOCgZk",
            "aWdlc3QYAyABKAkSDgoGbG9jYWxlGAYgASgJEjMKB2NoZWNraW4YBCACKAsy",
            "Ii5jaGVja2luX3Byb3RvLkFuZHJvaWRDaGVja2luUHJvdG8SFQoNZGVzaXJl",
            "ZF9idWlsZBgFIAEoCRIWCg5tYXJrZXRfY2hlY2tpbhgIIAEoCRIWCg5hY2Nv",
            "dW50X2Nvb2tpZRgLIAMoCRIRCgl0aW1lX3pvbmUYDCABKAkSFgoOc2VjdXJp",
            "dHlfdG9rZW4YDSABKAYSDwoHdmVyc2lvbhgOIAEoBRIQCghvdGFfY2VydBgP",
            "IAMoCRIQCghmcmFnbWVudBgUIAEoBRIRCgl1c2VyX25hbWUYFSABKAkSGgoS",
            "dXNlcl9zZXJpYWxfbnVtYmVyGBYgASgFIoMCChZBbmRyb2lkQ2hlY2tpblJl",
            "c3BvbnNlEhAKCHN0YXRzX29rGAEgAigIEhEKCXRpbWVfbXNlYxgDIAEoAxIO",
            "CgZkaWdlc3QYBCABKAkSFQoNc2V0dGluZ3NfZGlmZhgJIAEoCBIWCg5kZWxl",
            "dGVfc2V0dGluZxgKIAMoCRIwCgdzZXR0aW5nGAUgAygLMh8uY2hlY2tpbl9w",
            "cm90by5Hc2VydmljZXNTZXR0aW5nEhEKCW1hcmtldF9vaxgGIAEoCBISCgph",
            "bmRyb2lkX2lkGAcgASgGEhYKDnNlY3VyaXR5X3Rva2VuGAggASgGEhQKDHZl",
            "cnNpb25faW5mbxgLIAEoCUICSAM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::CheckinProto.AndroidCheckinReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::CheckinProto.GservicesSetting), global::CheckinProto.GservicesSetting.Parser, new[]{ "Name", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CheckinProto.AndroidCheckinRequest), global::CheckinProto.AndroidCheckinRequest.Parser, new[]{ "Imei", "Meid", "MacAddr", "MacAddrType", "SerialNumber", "Esn", "Id", "LoggingId", "Digest", "Locale", "Checkin", "DesiredBuild", "MarketCheckin", "AccountCookie", "TimeZone", "SecurityToken", "Version", "OtaCert", "Fragment", "UserName", "UserSerialNumber" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CheckinProto.AndroidCheckinResponse), global::CheckinProto.AndroidCheckinResponse.Parser, new[]{ "StatsOk", "TimeMsec", "Digest", "SettingsDiff", "DeleteSetting", "Setting", "MarketOk", "AndroidId", "SecurityToken", "VersionInfo" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A concrete name/value pair sent to the device's Gservices database.
  /// </summary>
  public sealed partial class GservicesSetting : pb::IMessage<GservicesSetting>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GservicesSetting> _parser = new pb::MessageParser<GservicesSetting>(() => new GservicesSetting());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GservicesSetting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CheckinProto.CheckinReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GservicesSetting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GservicesSetting(GservicesSetting other) : this() {
      name_ = other.name_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GservicesSetting Clone() {
      return new GservicesSetting(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private readonly static pb::ByteString NameDefaultValue = pb::ByteString.Empty;

    private pb::ByteString name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private readonly static pb::ByteString ValueDefaultValue = pb::ByteString.Empty;

    private pb::ByteString value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Value {
      get { return value_ ?? ValueDefaultValue; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasValue {
      get { return value_ != null; }
    }
    /// <summary>Clears the value of the "value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearValue() {
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GservicesSetting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GservicesSetting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasName) hash ^= Name.GetHashCode();
      if (HasValue) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteBytes(Name);
      }
      if (HasValue) {
        output.WriteRawTag(18);
        output.WriteBytes(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteBytes(Name);
      }
      if (HasValue) {
        output.WriteRawTag(18);
        output.WriteBytes(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (HasValue) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GservicesSetting other) {
      if (other == null) {
        return;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadBytes();
            break;
          }
          case 18: {
            Value = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadBytes();
            break;
          }
          case 18: {
            Value = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Devices send this every few hours to tell us how they're doing.
  /// </summary>
  public sealed partial class AndroidCheckinRequest : pb::IMessage<AndroidCheckinRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AndroidCheckinRequest> _parser = new pb::MessageParser<AndroidCheckinRequest>(() => new AndroidCheckinRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AndroidCheckinRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CheckinProto.CheckinReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AndroidCheckinRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AndroidCheckinRequest(AndroidCheckinRequest other) : this() {
      _hasBits0 = other._hasBits0;
      imei_ = other.imei_;
      meid_ = other.meid_;
      macAddr_ = other.macAddr_.Clone();
      macAddrType_ = other.macAddrType_.Clone();
      serialNumber_ = other.serialNumber_;
      esn_ = other.esn_;
      id_ = other.id_;
      loggingId_ = other.loggingId_;
      digest_ = other.digest_;
      locale_ = other.locale_;
      checkin_ = other.checkin_ != null ? other.checkin_.Clone() : null;
      desiredBuild_ = other.desiredBuild_;
      marketCheckin_ = other.marketCheckin_;
      accountCookie_ = other.accountCookie_.Clone();
      timeZone_ = other.timeZone_;
      securityToken_ = other.securityToken_;
      version_ = other.version_;
      otaCert_ = other.otaCert_.Clone();
      fragment_ = other.fragment_;
      userName_ = other.userName_;
      userSerialNumber_ = other.userSerialNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AndroidCheckinRequest Clone() {
      return new AndroidCheckinRequest(this);
    }

    /// <summary>Field number for the "imei" field.</summary>
    public const int ImeiFieldNumber = 1;
    private readonly static string ImeiDefaultValue = "";

    private string imei_;
    /// <summary>
    /// IMEI (used by GSM phones) is sent and stored as 15 decimal
    /// digits; the 15th is a check digit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Imei {
      get { return imei_ ?? ImeiDefaultValue; }
      set {
        imei_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "imei" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasImei {
      get { return imei_ != null; }
    }
    /// <summary>Clears the value of the "imei" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearImei() {
      imei_ = null;
    }

    /// <summary>Field number for the "meid" field.</summary>
    public const int MeidFieldNumber = 10;
    private readonly static string MeidDefaultValue = "";

    private string meid_;
    /// <summary>
    /// MEID (used by CDMA phones) is sent and stored as 14 hexadecimal
    /// digits (no check digit).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Meid {
      get { return meid_ ?? MeidDefaultValue; }
      set {
        meid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "meid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMeid {
      get { return meid_ != null; }
    }
    /// <summary>Clears the value of the "meid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMeid() {
      meid_ = null;
    }

    /// <summary>Field number for the "mac_addr" field.</summary>
    public const int MacAddrFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_macAddr_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> macAddr_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// MAC address (used by non-phone devices).  12 hexadecimal digits;
    /// no separators (eg "0016E6513AC2", not "00:16:E6:51:3A:C2").
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> MacAddr {
      get { return macAddr_; }
    }

    /// <summary>Field number for the "mac_addr_type" field.</summary>
    public const int MacAddrTypeFieldNumber = 19;
    private static readonly pb::FieldCodec<string> _repeated_macAddrType_codec
        = pb::FieldCodec.ForString(154);
    private readonly pbc::RepeatedField<string> macAddrType_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// An array parallel to mac_addr, describing the type of interface.
    /// Currently accepted values: "wifi", "ethernet", "bluetooth".  If
    /// not present, "wifi" is assumed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> MacAddrType {
      get { return macAddrType_; }
    }

    /// <summary>Field number for the "serial_number" field.</summary>
    public const int SerialNumberFieldNumber = 16;
    private readonly static string SerialNumberDefaultValue = "";

    private string serialNumber_;
    /// <summary>
    /// Serial number (a manufacturer-defined unique hardware
    /// identifier).  Alphanumeric, case-insensitive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SerialNumber {
      get { return serialNumber_ ?? SerialNumberDefaultValue; }
      set {
        serialNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "serial_number" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSerialNumber {
      get { return serialNumber_ != null; }
    }
    /// <summary>Clears the value of the "serial_number" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSerialNumber() {
      serialNumber_ = null;
    }

    /// <summary>Field number for the "esn" field.</summary>
    public const int EsnFieldNumber = 17;
    private readonly static string EsnDefaultValue = "";

    private string esn_;
    /// <summary>
    /// Older CDMA networks use an ESN (8 hex digits) instead of an MEID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Esn {
      get { return esn_ ?? EsnDefaultValue; }
      set {
        esn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "esn" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEsn {
      get { return esn_ != null; }
    }
    /// <summary>Clears the value of the "esn" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEsn() {
      esn_ = null;
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private readonly static long IdDefaultValue = 0L;

    private long id_;
    /// <summary>
    /// Android device ID, not logged
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "logging_id" field.</summary>
    public const int LoggingIdFieldNumber = 7;
    private readonly static long LoggingIdDefaultValue = 0L;

    private long loggingId_;
    /// <summary>
    /// Pseudonymous logging ID for Sawmill
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long LoggingId {
      get { if ((_hasBits0 & 2) != 0) { return loggingId_; } else { return LoggingIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        loggingId_ = value;
      }
    }
    /// <summary>Gets whether the "logging_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLoggingId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "logging_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLoggingId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "digest" field.</summary>
    public const int DigestFieldNumber = 3;
    private readonly static string DigestDefaultValue = "";

    private string digest_;
    /// <summary>
    /// Digest of device provisioning, not logged.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Digest {
      get { return digest_ ?? DigestDefaultValue; }
      set {
        digest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "digest" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDigest {
      get { return digest_ != null; }
    }
    /// <summary>Clears the value of the "digest" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDigest() {
      digest_ = null;
    }

    /// <summary>Field number for the "locale" field.</summary>
    public const int LocaleFieldNumber = 6;
    private readonly static string LocaleDefaultValue = "";

    private string locale_;
    /// <summary>
    /// Current locale in standard (xx_XX) format
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Locale {
      get { return locale_ ?? LocaleDefaultValue; }
      set {
        locale_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "locale" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLocale {
      get { return locale_ != null; }
    }
    /// <summary>Clears the value of the "locale" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLocale() {
      locale_ = null;
    }

    /// <summary>Field number for the "checkin" field.</summary>
    public const int CheckinFieldNumber = 4;
    private global::CheckinProto.AndroidCheckinProto checkin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::CheckinProto.AndroidCheckinProto Checkin {
      get { return checkin_; }
      set {
        checkin_ = value;
      }
    }

    /// <summary>Field number for the "desired_build" field.</summary>
    public const int DesiredBuildFieldNumber = 5;
    private readonly static string DesiredBuildDefaultValue = "";

    private string desiredBuild_;
    /// <summary>
    /// DEPRECATED, see AndroidCheckinProto.requested_group
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DesiredBuild {
      get { return desiredBuild_ ?? DesiredBuildDefaultValue; }
      set {
        desiredBuild_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "desired_build" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDesiredBuild {
      get { return desiredBuild_ != null; }
    }
    /// <summary>Clears the value of the "desired_build" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDesiredBuild() {
      desiredBuild_ = null;
    }

    /// <summary>Field number for the "market_checkin" field.</summary>
    public const int MarketCheckinFieldNumber = 8;
    private readonly static string MarketCheckinDefaultValue = "";

    private string marketCheckin_;
    /// <summary>
    /// Blob of data from the Market app to be passed to Market API server
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MarketCheckin {
      get { return marketCheckin_ ?? MarketCheckinDefaultValue; }
      set {
        marketCheckin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "market_checkin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMarketCheckin {
      get { return marketCheckin_ != null; }
    }
    /// <summary>Clears the value of the "market_checkin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMarketCheckin() {
      marketCheckin_ = null;
    }

    /// <summary>Field number for the "account_cookie" field.</summary>
    public const int AccountCookieFieldNumber = 11;
    private static readonly pb::FieldCodec<string> _repeated_accountCookie_codec
        = pb::FieldCodec.ForString(90);
    private readonly pbc::RepeatedField<string> accountCookie_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// SID cookies of any google accounts stored on the phone.  Not logged.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> AccountCookie {
      get { return accountCookie_; }
    }

    /// <summary>Field number for the "time_zone" field.</summary>
    public const int TimeZoneFieldNumber = 12;
    private readonly static string TimeZoneDefaultValue = "";

    private string timeZone_;
    /// <summary>
    /// Time zone.  Not currently logged.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TimeZone {
      get { return timeZone_ ?? TimeZoneDefaultValue; }
      set {
        timeZone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "time_zone" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTimeZone {
      get { return timeZone_ != null; }
    }
    /// <summary>Clears the value of the "time_zone" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTimeZone() {
      timeZone_ = null;
    }

    /// <summary>Field number for the "security_token" field.</summary>
    public const int SecurityTokenFieldNumber = 13;
    private readonly static ulong SecurityTokenDefaultValue = 0UL;

    private ulong securityToken_;
    /// <summary>
    /// Security token used to validate the checkin request.
    /// Required for android IDs issued to Froyo+ devices, not for legacy IDs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong SecurityToken {
      get { if ((_hasBits0 & 4) != 0) { return securityToken_; } else { return SecurityTokenDefaultValue; } }
      set {
        _hasBits0 |= 4;
        securityToken_ = value;
      }
    }
    /// <summary>Gets whether the "security_token" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSecurityToken {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "security_token" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSecurityToken() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 14;
    private readonly static int VersionDefaultValue = 0;

    private int version_;
    /// <summary>
    /// Version of checkin protocol.
    ///
    /// There are currently two versions:
    ///
    /// - version field missing: android IDs are assigned based on
    ///   hardware identifiers.  unsecured in the sense that you can
    ///   "unregister" someone's phone by sending a registration request
    ///   with their IMEI/MEID/MAC.
    ///
    /// - version=2: android IDs are assigned randomly.  The device is
    ///   sent a security token that must be included in all future
    ///   checkins for that android id.
    ///
    /// - version=3: same as version 2, but the 'fragment' field is
    ///   provided, and the device understands incremental updates to the
    ///   gservices table (ie, only returning the keys whose values have
    ///   changed.)
    ///
    /// (version=1 was skipped to avoid confusion with the "missing"
    /// version field that is effectively version 1.)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Version {
      get { if ((_hasBits0 & 8) != 0) { return version_; } else { return VersionDefaultValue; } }
      set {
        _hasBits0 |= 8;
        version_ = value;
      }
    }
    /// <summary>Gets whether the "version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVersion {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVersion() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "ota_cert" field.</summary>
    public const int OtaCertFieldNumber = 15;
    private static readonly pb::FieldCodec<string> _repeated_otaCert_codec
        = pb::FieldCodec.ForString(122);
    private readonly pbc::RepeatedField<string> otaCert_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// OTA certs accepted by device (base-64 SHA-1 of cert files).  Not
    /// logged.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> OtaCert {
      get { return otaCert_; }
    }

    /// <summary>Field number for the "fragment" field.</summary>
    public const int FragmentFieldNumber = 20;
    private readonly static int FragmentDefaultValue = 0;

    private int fragment_;
    /// <summary>
    /// A single CheckinTask on the device may lead to multiple checkin
    /// requests if there is too much log data to upload in a single
    /// request.  For version 3 and up, this field will be filled in with
    /// the number of the request, starting with 0.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Fragment {
      get { if ((_hasBits0 & 16) != 0) { return fragment_; } else { return FragmentDefaultValue; } }
      set {
        _hasBits0 |= 16;
        fragment_ = value;
      }
    }
    /// <summary>Gets whether the "fragment" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFragment {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "fragment" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFragment() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "user_name" field.</summary>
    public const int UserNameFieldNumber = 21;
    private readonly static string UserNameDefaultValue = "";

    private string userName_;
    /// <summary>
    /// For devices supporting multiple users, the name of the current
    /// profile (they all check in independently, just as if they were
    /// multiple physical devices).  This may not be set, even if the
    /// device is using multiuser.  (checkin.user_number should be set to
    /// the ordinal of the user.)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UserName {
      get { return userName_ ?? UserNameDefaultValue; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "user_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUserName {
      get { return userName_ != null; }
    }
    /// <summary>Clears the value of the "user_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUserName() {
      userName_ = null;
    }

    /// <summary>Field number for the "user_serial_number" field.</summary>
    public const int UserSerialNumberFieldNumber = 22;
    private readonly static int UserSerialNumberDefaultValue = 0;

    private int userSerialNumber_;
    /// <summary>
    /// For devices supporting multiple user profiles, the serial number
    /// for the user checking in.  Not logged.  May not be set, even if
    /// the device supportes multiuser.  checkin.user_number is the
    /// ordinal of the user (0, 1, 2, ...), which may be reused if users
    /// are deleted and re-created.  user_serial_number is never reused
    /// (unless the device is wiped).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UserSerialNumber {
      get { if ((_hasBits0 & 32) != 0) { return userSerialNumber_; } else { return UserSerialNumberDefaultValue; } }
      set {
        _hasBits0 |= 32;
        userSerialNumber_ = value;
      }
    }
    /// <summary>Gets whether the "user_serial_number" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUserSerialNumber {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "user_serial_number" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUserSerialNumber() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AndroidCheckinRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AndroidCheckinRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Imei != other.Imei) return false;
      if (Meid != other.Meid) return false;
      if(!macAddr_.Equals(other.macAddr_)) return false;
      if(!macAddrType_.Equals(other.macAddrType_)) return false;
      if (SerialNumber != other.SerialNumber) return false;
      if (Esn != other.Esn) return false;
      if (Id != other.Id) return false;
      if (LoggingId != other.LoggingId) return false;
      if (Digest != other.Digest) return false;
      if (Locale != other.Locale) return false;
      if (!object.Equals(Checkin, other.Checkin)) return false;
      if (DesiredBuild != other.DesiredBuild) return false;
      if (MarketCheckin != other.MarketCheckin) return false;
      if(!accountCookie_.Equals(other.accountCookie_)) return false;
      if (TimeZone != other.TimeZone) return false;
      if (SecurityToken != other.SecurityToken) return false;
      if (Version != other.Version) return false;
      if(!otaCert_.Equals(other.otaCert_)) return false;
      if (Fragment != other.Fragment) return false;
      if (UserName != other.UserName) return false;
      if (UserSerialNumber != other.UserSerialNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasImei) hash ^= Imei.GetHashCode();
      if (HasMeid) hash ^= Meid.GetHashCode();
      hash ^= macAddr_.GetHashCode();
      hash ^= macAddrType_.GetHashCode();
      if (HasSerialNumber) hash ^= SerialNumber.GetHashCode();
      if (HasEsn) hash ^= Esn.GetHashCode();
      if (HasId) hash ^= Id.GetHashCode();
      if (HasLoggingId) hash ^= LoggingId.GetHashCode();
      if (HasDigest) hash ^= Digest.GetHashCode();
      if (HasLocale) hash ^= Locale.GetHashCode();
      if (checkin_ != null) hash ^= Checkin.GetHashCode();
      if (HasDesiredBuild) hash ^= DesiredBuild.GetHashCode();
      if (HasMarketCheckin) hash ^= MarketCheckin.GetHashCode();
      hash ^= accountCookie_.GetHashCode();
      if (HasTimeZone) hash ^= TimeZone.GetHashCode();
      if (HasSecurityToken) hash ^= SecurityToken.GetHashCode();
      if (HasVersion) hash ^= Version.GetHashCode();
      hash ^= otaCert_.GetHashCode();
      if (HasFragment) hash ^= Fragment.GetHashCode();
      if (HasUserName) hash ^= UserName.GetHashCode();
      if (HasUserSerialNumber) hash ^= UserSerialNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasImei) {
        output.WriteRawTag(10);
        output.WriteString(Imei);
      }
      if (HasId) {
        output.WriteRawTag(16);
        output.WriteInt64(Id);
      }
      if (HasDigest) {
        output.WriteRawTag(26);
        output.WriteString(Digest);
      }
      if (checkin_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Checkin);
      }
      if (HasDesiredBuild) {
        output.WriteRawTag(42);
        output.WriteString(DesiredBuild);
      }
      if (HasLocale) {
        output.WriteRawTag(50);
        output.WriteString(Locale);
      }
      if (HasLoggingId) {
        output.WriteRawTag(56);
        output.WriteInt64(LoggingId);
      }
      if (HasMarketCheckin) {
        output.WriteRawTag(66);
        output.WriteString(MarketCheckin);
      }
      macAddr_.WriteTo(output, _repeated_macAddr_codec);
      if (HasMeid) {
        output.WriteRawTag(82);
        output.WriteString(Meid);
      }
      accountCookie_.WriteTo(output, _repeated_accountCookie_codec);
      if (HasTimeZone) {
        output.WriteRawTag(98);
        output.WriteString(TimeZone);
      }
      if (HasSecurityToken) {
        output.WriteRawTag(105);
        output.WriteFixed64(SecurityToken);
      }
      if (HasVersion) {
        output.WriteRawTag(112);
        output.WriteInt32(Version);
      }
      otaCert_.WriteTo(output, _repeated_otaCert_codec);
      if (HasSerialNumber) {
        output.WriteRawTag(130, 1);
        output.WriteString(SerialNumber);
      }
      if (HasEsn) {
        output.WriteRawTag(138, 1);
        output.WriteString(Esn);
      }
      macAddrType_.WriteTo(output, _repeated_macAddrType_codec);
      if (HasFragment) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Fragment);
      }
      if (HasUserName) {
        output.WriteRawTag(170, 1);
        output.WriteString(UserName);
      }
      if (HasUserSerialNumber) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(UserSerialNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasImei) {
        output.WriteRawTag(10);
        output.WriteString(Imei);
      }
      if (HasId) {
        output.WriteRawTag(16);
        output.WriteInt64(Id);
      }
      if (HasDigest) {
        output.WriteRawTag(26);
        output.WriteString(Digest);
      }
      if (checkin_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Checkin);
      }
      if (HasDesiredBuild) {
        output.WriteRawTag(42);
        output.WriteString(DesiredBuild);
      }
      if (HasLocale) {
        output.WriteRawTag(50);
        output.WriteString(Locale);
      }
      if (HasLoggingId) {
        output.WriteRawTag(56);
        output.WriteInt64(LoggingId);
      }
      if (HasMarketCheckin) {
        output.WriteRawTag(66);
        output.WriteString(MarketCheckin);
      }
      macAddr_.WriteTo(ref output, _repeated_macAddr_codec);
      if (HasMeid) {
        output.WriteRawTag(82);
        output.WriteString(Meid);
      }
      accountCookie_.WriteTo(ref output, _repeated_accountCookie_codec);
      if (HasTimeZone) {
        output.WriteRawTag(98);
        output.WriteString(TimeZone);
      }
      if (HasSecurityToken) {
        output.WriteRawTag(105);
        output.WriteFixed64(SecurityToken);
      }
      if (HasVersion) {
        output.WriteRawTag(112);
        output.WriteInt32(Version);
      }
      otaCert_.WriteTo(ref output, _repeated_otaCert_codec);
      if (HasSerialNumber) {
        output.WriteRawTag(130, 1);
        output.WriteString(SerialNumber);
      }
      if (HasEsn) {
        output.WriteRawTag(138, 1);
        output.WriteString(Esn);
      }
      macAddrType_.WriteTo(ref output, _repeated_macAddrType_codec);
      if (HasFragment) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Fragment);
      }
      if (HasUserName) {
        output.WriteRawTag(170, 1);
        output.WriteString(UserName);
      }
      if (HasUserSerialNumber) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(UserSerialNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasImei) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Imei);
      }
      if (HasMeid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Meid);
      }
      size += macAddr_.CalculateSize(_repeated_macAddr_codec);
      size += macAddrType_.CalculateSize(_repeated_macAddrType_codec);
      if (HasSerialNumber) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SerialNumber);
      }
      if (HasEsn) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Esn);
      }
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (HasLoggingId) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LoggingId);
      }
      if (HasDigest) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Digest);
      }
      if (HasLocale) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Locale);
      }
      if (checkin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Checkin);
      }
      if (HasDesiredBuild) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DesiredBuild);
      }
      if (HasMarketCheckin) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MarketCheckin);
      }
      size += accountCookie_.CalculateSize(_repeated_accountCookie_codec);
      if (HasTimeZone) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TimeZone);
      }
      if (HasSecurityToken) {
        size += 1 + 8;
      }
      if (HasVersion) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      size += otaCert_.CalculateSize(_repeated_otaCert_codec);
      if (HasFragment) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Fragment);
      }
      if (HasUserName) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (HasUserSerialNumber) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UserSerialNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AndroidCheckinRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasImei) {
        Imei = other.Imei;
      }
      if (other.HasMeid) {
        Meid = other.Meid;
      }
      macAddr_.Add(other.macAddr_);
      macAddrType_.Add(other.macAddrType_);
      if (other.HasSerialNumber) {
        SerialNumber = other.SerialNumber;
      }
      if (other.HasEsn) {
        Esn = other.Esn;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasLoggingId) {
        LoggingId = other.LoggingId;
      }
      if (other.HasDigest) {
        Digest = other.Digest;
      }
      if (other.HasLocale) {
        Locale = other.Locale;
      }
      if (other.checkin_ != null) {
        if (checkin_ == null) {
          Checkin = new global::CheckinProto.AndroidCheckinProto();
        }
        Checkin.MergeFrom(other.Checkin);
      }
      if (other.HasDesiredBuild) {
        DesiredBuild = other.DesiredBuild;
      }
      if (other.HasMarketCheckin) {
        MarketCheckin = other.MarketCheckin;
      }
      accountCookie_.Add(other.accountCookie_);
      if (other.HasTimeZone) {
        TimeZone = other.TimeZone;
      }
      if (other.HasSecurityToken) {
        SecurityToken = other.SecurityToken;
      }
      if (other.HasVersion) {
        Version = other.Version;
      }
      otaCert_.Add(other.otaCert_);
      if (other.HasFragment) {
        Fragment = other.Fragment;
      }
      if (other.HasUserName) {
        UserName = other.UserName;
      }
      if (other.HasUserSerialNumber) {
        UserSerialNumber = other.UserSerialNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Imei = input.ReadString();
            break;
          }
          case 16: {
            Id = input.ReadInt64();
            break;
          }
          case 26: {
            Digest = input.ReadString();
            break;
          }
          case 34: {
            if (checkin_ == null) {
              Checkin = new global::CheckinProto.AndroidCheckinProto();
            }
            input.ReadMessage(Checkin);
            break;
          }
          case 42: {
            DesiredBuild = input.ReadString();
            break;
          }
          case 50: {
            Locale = input.ReadString();
            break;
          }
          case 56: {
            LoggingId = input.ReadInt64();
            break;
          }
          case 66: {
            MarketCheckin = input.ReadString();
            break;
          }
          case 74: {
            macAddr_.AddEntriesFrom(input, _repeated_macAddr_codec);
            break;
          }
          case 82: {
            Meid = input.ReadString();
            break;
          }
          case 90: {
            accountCookie_.AddEntriesFrom(input, _repeated_accountCookie_codec);
            break;
          }
          case 98: {
            TimeZone = input.ReadString();
            break;
          }
          case 105: {
            SecurityToken = input.ReadFixed64();
            break;
          }
          case 112: {
            Version = input.ReadInt32();
            break;
          }
          case 122: {
            otaCert_.AddEntriesFrom(input, _repeated_otaCert_codec);
            break;
          }
          case 130: {
            SerialNumber = input.ReadString();
            break;
          }
          case 138: {
            Esn = input.ReadString();
            break;
          }
          case 154: {
            macAddrType_.AddEntriesFrom(input, _repeated_macAddrType_codec);
            break;
          }
          case 160: {
            Fragment = input.ReadInt32();
            break;
          }
          case 170: {
            UserName = input.ReadString();
            break;
          }
          case 176: {
            UserSerialNumber = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Imei = input.ReadString();
            break;
          }
          case 16: {
            Id = input.ReadInt64();
            break;
          }
          case 26: {
            Digest = input.ReadString();
            break;
          }
          case 34: {
            if (checkin_ == null) {
              Checkin = new global::CheckinProto.AndroidCheckinProto();
            }
            input.ReadMessage(Checkin);
            break;
          }
          case 42: {
            DesiredBuild = input.ReadString();
            break;
          }
          case 50: {
            Locale = input.ReadString();
            break;
          }
          case 56: {
            LoggingId = input.ReadInt64();
            break;
          }
          case 66: {
            MarketCheckin = input.ReadString();
            break;
          }
          case 74: {
            macAddr_.AddEntriesFrom(ref input, _repeated_macAddr_codec);
            break;
          }
          case 82: {
            Meid = input.ReadString();
            break;
          }
          case 90: {
            accountCookie_.AddEntriesFrom(ref input, _repeated_accountCookie_codec);
            break;
          }
          case 98: {
            TimeZone = input.ReadString();
            break;
          }
          case 105: {
            SecurityToken = input.ReadFixed64();
            break;
          }
          case 112: {
            Version = input.ReadInt32();
            break;
          }
          case 122: {
            otaCert_.AddEntriesFrom(ref input, _repeated_otaCert_codec);
            break;
          }
          case 130: {
            SerialNumber = input.ReadString();
            break;
          }
          case 138: {
            Esn = input.ReadString();
            break;
          }
          case 154: {
            macAddrType_.AddEntriesFrom(ref input, _repeated_macAddrType_codec);
            break;
          }
          case 160: {
            Fragment = input.ReadInt32();
            break;
          }
          case 170: {
            UserName = input.ReadString();
            break;
          }
          case 176: {
            UserSerialNumber = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The response to the device.
  /// </summary>
  public sealed partial class AndroidCheckinResponse : pb::IMessage<AndroidCheckinResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AndroidCheckinResponse> _parser = new pb::MessageParser<AndroidCheckinResponse>(() => new AndroidCheckinResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AndroidCheckinResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CheckinProto.CheckinReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AndroidCheckinResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AndroidCheckinResponse(AndroidCheckinResponse other) : this() {
      _hasBits0 = other._hasBits0;
      statsOk_ = other.statsOk_;
      timeMsec_ = other.timeMsec_;
      digest_ = other.digest_;
      settingsDiff_ = other.settingsDiff_;
      deleteSetting_ = other.deleteSetting_.Clone();
      setting_ = other.setting_.Clone();
      marketOk_ = other.marketOk_;
      androidId_ = other.androidId_;
      securityToken_ = other.securityToken_;
      versionInfo_ = other.versionInfo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AndroidCheckinResponse Clone() {
      return new AndroidCheckinResponse(this);
    }

    /// <summary>Field number for the "stats_ok" field.</summary>
    public const int StatsOkFieldNumber = 1;
    private readonly static bool StatsOkDefaultValue = false;

    private bool statsOk_;
    /// <summary>
    /// Whether statistics were recorded properly.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool StatsOk {
      get { if ((_hasBits0 & 1) != 0) { return statsOk_; } else { return StatsOkDefaultValue; } }
      set {
        _hasBits0 |= 1;
        statsOk_ = value;
      }
    }
    /// <summary>Gets whether the "stats_ok" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStatsOk {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "stats_ok" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStatsOk() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "time_msec" field.</summary>
    public const int TimeMsecFieldNumber = 3;
    private readonly static long TimeMsecDefaultValue = 0L;

    private long timeMsec_;
    /// <summary>
    /// Time of day from server (Java epoch).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TimeMsec {
      get { if ((_hasBits0 & 2) != 0) { return timeMsec_; } else { return TimeMsecDefaultValue; } }
      set {
        _hasBits0 |= 2;
        timeMsec_ = value;
      }
    }
    /// <summary>Gets whether the "time_msec" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTimeMsec {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "time_msec" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTimeMsec() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "digest" field.</summary>
    public const int DigestFieldNumber = 4;
    private readonly static string DigestDefaultValue = "";

    private string digest_;
    /// <summary>
    /// Provisioning is sent if the request included an obsolete digest.
    ///
    /// For version &lt;= 2, 'digest' contains the digest that should be
    /// sent back to the server on the next checkin, and 'setting'
    /// contains the entire gservices table (which replaces the entire
    /// current table on the device).
    ///
    /// for version >= 3, 'digest' will be absent.  If 'settings_diff'
    /// is false, then 'setting' contains the entire table, as in version
    /// 2.  If 'settings_diff' is true, then 'delete_setting' contains
    /// the keys to delete, and 'setting' contains only keys to be added
    /// or for which the value has changed.  All other keys in the
    /// current table should be left untouched.  If 'settings_diff' is
    /// absent, don't touch the existing gservices table.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Digest {
      get { return digest_ ?? DigestDefaultValue; }
      set {
        digest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "digest" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDigest {
      get { return digest_ != null; }
    }
    /// <summary>Clears the value of the "digest" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDigest() {
      digest_ = null;
    }

    /// <summary>Field number for the "settings_diff" field.</summary>
    public const int SettingsDiffFieldNumber = 9;
    private readonly static bool SettingsDiffDefaultValue = false;

    private bool settingsDiff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SettingsDiff {
      get { if ((_hasBits0 & 32) != 0) { return settingsDiff_; } else { return SettingsDiffDefaultValue; } }
      set {
        _hasBits0 |= 32;
        settingsDiff_ = value;
      }
    }
    /// <summary>Gets whether the "settings_diff" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSettingsDiff {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "settings_diff" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSettingsDiff() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "delete_setting" field.</summary>
    public const int DeleteSettingFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _repeated_deleteSetting_codec
        = pb::FieldCodec.ForString(82);
    private readonly pbc::RepeatedField<string> deleteSetting_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> DeleteSetting {
      get { return deleteSetting_; }
    }

    /// <summary>Field number for the "setting" field.</summary>
    public const int SettingFieldNumber = 5;
    private static readonly pb::FieldCodec<global::CheckinProto.GservicesSetting> _repeated_setting_codec
        = pb::FieldCodec.ForMessage(42, global::CheckinProto.GservicesSetting.Parser);
    private readonly pbc::RepeatedField<global::CheckinProto.GservicesSetting> setting_ = new pbc::RepeatedField<global::CheckinProto.GservicesSetting>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::CheckinProto.GservicesSetting> Setting {
      get { return setting_; }
    }

    /// <summary>Field number for the "market_ok" field.</summary>
    public const int MarketOkFieldNumber = 6;
    private readonly static bool MarketOkDefaultValue = false;

    private bool marketOk_;
    /// <summary>
    /// If Market got the market_checkin data OK.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool MarketOk {
      get { if ((_hasBits0 & 4) != 0) { return marketOk_; } else { return MarketOkDefaultValue; } }
      set {
        _hasBits0 |= 4;
        marketOk_ = value;
      }
    }
    /// <summary>Gets whether the "market_ok" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMarketOk {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "market_ok" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMarketOk() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "android_id" field.</summary>
    public const int AndroidIdFieldNumber = 7;
    private readonly static ulong AndroidIdDefaultValue = 0UL;

    private ulong androidId_;
    /// <summary>
    /// From the request, or newly assigned
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong AndroidId {
      get { if ((_hasBits0 & 8) != 0) { return androidId_; } else { return AndroidIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        androidId_ = value;
      }
    }
    /// <summary>Gets whether the "android_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAndroidId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "android_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAndroidId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "security_token" field.</summary>
    public const int SecurityTokenFieldNumber = 8;
    private readonly static ulong SecurityTokenDefaultValue = 0UL;

    private ulong securityToken_;
    /// <summary>
    /// The associated security token
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong SecurityToken {
      get { if ((_hasBits0 & 16) != 0) { return securityToken_; } else { return SecurityTokenDefaultValue; } }
      set {
        _hasBits0 |= 16;
        securityToken_ = value;
      }
    }
    /// <summary>Gets whether the "security_token" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSecurityToken {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "security_token" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSecurityToken() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "version_info" field.</summary>
    public const int VersionInfoFieldNumber = 11;
    private readonly static string VersionInfoDefaultValue = "";

    private string versionInfo_;
    /// <summary>
    /// NEXT TAG: 12
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string VersionInfo {
      get { return versionInfo_ ?? VersionInfoDefaultValue; }
      set {
        versionInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "version_info" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVersionInfo {
      get { return versionInfo_ != null; }
    }
    /// <summary>Clears the value of the "version_info" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVersionInfo() {
      versionInfo_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AndroidCheckinResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AndroidCheckinResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatsOk != other.StatsOk) return false;
      if (TimeMsec != other.TimeMsec) return false;
      if (Digest != other.Digest) return false;
      if (SettingsDiff != other.SettingsDiff) return false;
      if(!deleteSetting_.Equals(other.deleteSetting_)) return false;
      if(!setting_.Equals(other.setting_)) return false;
      if (MarketOk != other.MarketOk) return false;
      if (AndroidId != other.AndroidId) return false;
      if (SecurityToken != other.SecurityToken) return false;
      if (VersionInfo != other.VersionInfo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStatsOk) hash ^= StatsOk.GetHashCode();
      if (HasTimeMsec) hash ^= TimeMsec.GetHashCode();
      if (HasDigest) hash ^= Digest.GetHashCode();
      if (HasSettingsDiff) hash ^= SettingsDiff.GetHashCode();
      hash ^= deleteSetting_.GetHashCode();
      hash ^= setting_.GetHashCode();
      if (HasMarketOk) hash ^= MarketOk.GetHashCode();
      if (HasAndroidId) hash ^= AndroidId.GetHashCode();
      if (HasSecurityToken) hash ^= SecurityToken.GetHashCode();
      if (HasVersionInfo) hash ^= VersionInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStatsOk) {
        output.WriteRawTag(8);
        output.WriteBool(StatsOk);
      }
      if (HasTimeMsec) {
        output.WriteRawTag(24);
        output.WriteInt64(TimeMsec);
      }
      if (HasDigest) {
        output.WriteRawTag(34);
        output.WriteString(Digest);
      }
      setting_.WriteTo(output, _repeated_setting_codec);
      if (HasMarketOk) {
        output.WriteRawTag(48);
        output.WriteBool(MarketOk);
      }
      if (HasAndroidId) {
        output.WriteRawTag(57);
        output.WriteFixed64(AndroidId);
      }
      if (HasSecurityToken) {
        output.WriteRawTag(65);
        output.WriteFixed64(SecurityToken);
      }
      if (HasSettingsDiff) {
        output.WriteRawTag(72);
        output.WriteBool(SettingsDiff);
      }
      deleteSetting_.WriteTo(output, _repeated_deleteSetting_codec);
      if (HasVersionInfo) {
        output.WriteRawTag(90);
        output.WriteString(VersionInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStatsOk) {
        output.WriteRawTag(8);
        output.WriteBool(StatsOk);
      }
      if (HasTimeMsec) {
        output.WriteRawTag(24);
        output.WriteInt64(TimeMsec);
      }
      if (HasDigest) {
        output.WriteRawTag(34);
        output.WriteString(Digest);
      }
      setting_.WriteTo(ref output, _repeated_setting_codec);
      if (HasMarketOk) {
        output.WriteRawTag(48);
        output.WriteBool(MarketOk);
      }
      if (HasAndroidId) {
        output.WriteRawTag(57);
        output.WriteFixed64(AndroidId);
      }
      if (HasSecurityToken) {
        output.WriteRawTag(65);
        output.WriteFixed64(SecurityToken);
      }
      if (HasSettingsDiff) {
        output.WriteRawTag(72);
        output.WriteBool(SettingsDiff);
      }
      deleteSetting_.WriteTo(ref output, _repeated_deleteSetting_codec);
      if (HasVersionInfo) {
        output.WriteRawTag(90);
        output.WriteString(VersionInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasStatsOk) {
        size += 1 + 1;
      }
      if (HasTimeMsec) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeMsec);
      }
      if (HasDigest) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Digest);
      }
      if (HasSettingsDiff) {
        size += 1 + 1;
      }
      size += deleteSetting_.CalculateSize(_repeated_deleteSetting_codec);
      size += setting_.CalculateSize(_repeated_setting_codec);
      if (HasMarketOk) {
        size += 1 + 1;
      }
      if (HasAndroidId) {
        size += 1 + 8;
      }
      if (HasSecurityToken) {
        size += 1 + 8;
      }
      if (HasVersionInfo) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AndroidCheckinResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasStatsOk) {
        StatsOk = other.StatsOk;
      }
      if (other.HasTimeMsec) {
        TimeMsec = other.TimeMsec;
      }
      if (other.HasDigest) {
        Digest = other.Digest;
      }
      if (other.HasSettingsDiff) {
        SettingsDiff = other.SettingsDiff;
      }
      deleteSetting_.Add(other.deleteSetting_);
      setting_.Add(other.setting_);
      if (other.HasMarketOk) {
        MarketOk = other.MarketOk;
      }
      if (other.HasAndroidId) {
        AndroidId = other.AndroidId;
      }
      if (other.HasSecurityToken) {
        SecurityToken = other.SecurityToken;
      }
      if (other.HasVersionInfo) {
        VersionInfo = other.VersionInfo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StatsOk = input.ReadBool();
            break;
          }
          case 24: {
            TimeMsec = input.ReadInt64();
            break;
          }
          case 34: {
            Digest = input.ReadString();
            break;
          }
          case 42: {
            setting_.AddEntriesFrom(input, _repeated_setting_codec);
            break;
          }
          case 48: {
            MarketOk = input.ReadBool();
            break;
          }
          case 57: {
            AndroidId = input.ReadFixed64();
            break;
          }
          case 65: {
            SecurityToken = input.ReadFixed64();
            break;
          }
          case 72: {
            SettingsDiff = input.ReadBool();
            break;
          }
          case 82: {
            deleteSetting_.AddEntriesFrom(input, _repeated_deleteSetting_codec);
            break;
          }
          case 90: {
            VersionInfo = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StatsOk = input.ReadBool();
            break;
          }
          case 24: {
            TimeMsec = input.ReadInt64();
            break;
          }
          case 34: {
            Digest = input.ReadString();
            break;
          }
          case 42: {
            setting_.AddEntriesFrom(ref input, _repeated_setting_codec);
            break;
          }
          case 48: {
            MarketOk = input.ReadBool();
            break;
          }
          case 57: {
            AndroidId = input.ReadFixed64();
            break;
          }
          case 65: {
            SecurityToken = input.ReadFixed64();
            break;
          }
          case 72: {
            SettingsDiff = input.ReadBool();
            break;
          }
          case 82: {
            deleteSetting_.AddEntriesFrom(ref input, _repeated_deleteSetting_codec);
            break;
          }
          case 90: {
            VersionInfo = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code

using System.Text;
using Newtonsoft.Json;
using RustPlusApi.Fcm.Configuration;
using RustPlusApi.Fcm.Data;

namespace RustPlusApi.Fcm.Services;

/// <summary>
/// Service responsible for registering with Rust+ API servers to enable push notifications.
/// This mirrors the functionality of the JavaScript fcm-register tool.
/// </summary>
public class RustPlusRegistrationService
{
    private static readonly HttpClient HttpClient = new();

    /// <summary>
    /// Reads JavaScript config and performs Rust+ API registration if needed.
    /// This combines the config reading with the registration process.
    /// </summary>
    /// <param name="configFilePath">Path to the JavaScript config file generated by fcm-register</param>
    /// <returns>Credentials ready for use with FCM listener</returns>
    public static async Task<Credentials> ReadAndRegisterFromJavaScriptConfigAsync(string configFilePath)
    {
        // Read the JavaScript config
        var jsConfig = FcmConfigurationReader.ReadJavaScriptConfig(configFilePath);

        // Convert to credentials format
        var credentials = FcmConfigurationReader.ConvertToCredentials(jsConfig);

        // Perform registration with Rust+ API if we have the auth token
        if (!string.IsNullOrEmpty(jsConfig.RustplusAuthToken))
        {
            await RegisterWithRustPlusApiAsync(jsConfig.RustplusAuthToken, jsConfig.ExpoPushToken);
            Console.WriteLine("Successfully registered with Rust+ API servers");
        }
        else
        {
            Console.WriteLine("No Rust+ auth token found - using pre-registered credentials");
        }

        return credentials;
    }

    /// <summary>
    /// Registers the device with Rust+ API servers to enable push notifications.
    /// This mimics the registration process performed by the JavaScript fcm-register tool.
    /// </summary>
    /// <param name="authToken">The Rust+ authentication token</param>
    /// <param name="expoPushToken">The Expo push token (optional)</param>
    private static async Task RegisterWithRustPlusApiAsync(string authToken, string? expoPushToken)
    {
        try
        {
            // This is a simplified registration - the exact endpoints and payload
            // would need to be determined from the JavaScript implementation
            // For now, this is a placeholder that represents the registration concept

            var registrationData = new
            {
                authToken = authToken,
                expoPushToken = expoPushToken,
                timestamp = DateTimeOffset.UtcNow.ToUnixTimeSeconds()
            };

            var json = JsonConvert.SerializeObject(registrationData);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            // Note: The actual Rust+ API registration endpoints would be used here
            // This is a placeholder representing the registration process
            Console.WriteLine($"Performing Rust+ API registration with auth token: {authToken[..Math.Min(8, authToken.Length)]}...");

            // In a real implementation, this would make HTTP calls to the Rust+ API
            // await HttpClient.PostAsync("https://companion-rust.facepunch.com/api/register", content);

            // For now, we just simulate successful registration
            await Task.Delay(100); // Simulate network call
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Warning: Failed to register with Rust+ API: {ex.Message}");
            Console.WriteLine("Continuing with existing credentials...");
        }
    }
}
